const double PARALLAX_BIAS_DEFAULT = 7;

double relativeParallax(double origin, double frameOfReference, double softener) {
	double distance = playerOrigin.x - frameOfReference;
	distance /= softener;

	return origin - distance;
}

double absoluteParallax(double origin, double softener) {
	return relativeParallax(origin, screenBounds.x/2, softener);
}

//TODO: We have a parallax method that is perfectly logical.
//TODO: Mike's current shadow algorihm is technically correct - the light source is stationary, and the top middle of the screen.
//TODO: As Mike strafes left and right, his shadow lengthens in the appropriate direction.

//TODO: Despite the technical correctness of our relativeParallax method, it's application to the enemies shadows is wrong from a realism standpoint.
//TODO: Currently, it appears that Mike is carrying the lightsource with him as he moves, so enemies shadows are straight if he's lined up with them.
//TODO: Quite simply, we wish the shadows to lengthen based on that monster's proximity to the middle of the screen, just as we're doing with Mike right now.

//TODO: The tricky thing is, we'll need to take into account the enemy's *own* parallax offset when doing this.


double realParallaxInverse(double subject, double frameOfReference, double softener) {
	double distance = subject - frameOfReference;
	distance /= softener;

	return subject + distance;
}

double realParallax(double subject, double frameOfReference, double softener) {
	double distance = subject - frameOfReference;
	distance /= softener;

	return subject - distance;
}

double getPanCenter() {
	//How far away from absolute center Mike currently is.

	double absoluteScreenCenter = screenBounds.x / 2;
	double playerOffsetFromScreenCenter = (absoluteScreenCenter - playerOrigin.x);
	return playerOffsetFromScreenCenter;
}

double getAbsoluteCenter() {
	return getPanCenter() + screenBounds.x/2;
}

double getShadowOffset(double subject) {
	return subject + getPanCenter();
}
